import Component from '@glimmer/component';
import { action } from '@ember/object';
import { tracked } from '@glimmer/tracking';
import { inject as service } from '@ember/service';
import { task } from 'ember-concurrency';
import ENV from '@cardstack/cardhost/config/environment';
import { fieldCards } from '../utils/scaffolding';
import cloneDeep from 'lodash/cloneDeep';
import { canonicalURLToCardId } from '@cardstack/core/card-id';

const { environment } = ENV;

export default class CardManipulator extends Component {
  @service data;
  @service router;
  @service cardstackSession;
  @service cssModeToggle;

  @tracked statusMsg;
  @tracked card;
  @tracked catalogEntries;
  @tracked parentCard;
  @tracked grandParentCard;
  @tracked selectedField;
  @tracked selectedFieldName;
  @tracked selectedFieldType;
  @tracked isDragging;
  @tracked cardId;
  @tracked cardSelected = true;
  @tracked fieldOrderPromise;
  @tracked isolatedCss;

  constructor(...args) {
    super(...args);

    this.originalCard = this.args.card;
    this.load.perform();
  }

  get cardJson() {
    if (!this.args.card) {
      return null;
    }
    return JSON.stringify(this.args.card.document.jsonapi, null, 2);
  }

  @(task(function*() {
    /**
      Returns field name in the form field-12, incrementing from the highest
      existing field number. Ex: if the highest is field-15, this will return
      field-16. If there are no fields, it returns field-1.
    */
    let existingFields = yield this.args.card.fields();
    let autogeneratedFieldNames = existingFields.map(field => field.name).filter(name => /^field-\d+$/.test(name));
    let fieldNumbers = autogeneratedFieldNames.map(item => Number(item.split('-')[1]));
    let newNumber = fieldNumbers.length ? Math.max(...fieldNumbers) + 1 : 1;
    return `field-${newNumber}`;
  }).drop())
  getNewFieldName;

  @(task(function*(cardId, position, evt) {
    let doc = this.args.card.document;

    let fieldName = yield this.getNewFieldName.perform();
    let csFieldSets = cloneDeep(this.args.card.csFieldSets) || { isolated: [], embedded: [] };
    let csFieldOrder = [...(this.args.card.csFieldOrder || [])];
    csFieldOrder.splice(position, 0, fieldName);
    csFieldSets.isolated = csFieldSets.isolated || [];
    csFieldSets.isolated.push(fieldName);

    doc.withField(fieldName, canonicalURLToCardId(cardId)).withAttributes({ csFieldSets, csFieldOrder });
    let patchedCard = yield this.patchCard.perform(doc);
    let field = yield patchedCard.field(fieldName);

    if (this.fieldOrderResolve) {
      this.fieldOrderResolve();
    }
    yield this.selectField.perform(field, evt);
  }).enqueue())
  addField;

  @(task(function*(fieldName, newPosition, evt) {
    let doc = this.args.card.document;
    let csFieldOrder = [...(this.args.card.csFieldOrder || [])];
    csFieldOrder = csFieldOrder.filter(i => i !== fieldName);
    csFieldOrder.splice(newPosition, 0, fieldName);

    doc.withAttributes({ csFieldOrder });
    let patchedCard = yield this.patchCard.perform(doc);
    let field = yield patchedCard.field(fieldName);

    if (this.fieldOrderResolve) {
      this.fieldOrderResolve();
    }
    yield this.selectField.perform(field, evt);
  }).drop())
  setPosition;

  @(task(function*() {
    if (!this.selectedField) {
      return;
    }

    let fieldType = yield this.selectedField.adoptsFrom();
    this.selectedFieldType = fieldType.csTitle;
  }).restartable())
  loadSelectedField;

  @task(function*() {
    let [catalogEntries, parentCard, isolatedCss] = yield Promise.all([
      fieldCards(this.data),
      this.args.card.adoptsFrom(),
      this.args.card.loadFeature('isolated-css'),
    ]);

    this.catalogEntries = catalogEntries;
    this.parentCard = parentCard;
    this.isolatedCss = isolatedCss;
    if (parentCard) {
      this.grandParentCard = yield parentCard.adoptsFrom();
    }
  })
  load;

  @(task(function*(doc) {
    let updatedCard = yield this.args.card.patch(doc.jsonapiWithoutMeta);
    this.args.updateCard(updatedCard, true);
    return updatedCard;
  }).enqueue())
  patchCard;

  @task(function*() {
    yield this.data.delete(this.args.card);
    this.router.transitionTo('index');
  })
  deleteCard;

  @(task(function*(oldFieldName, newFieldName) {
    let field = yield this.args.card.field(oldFieldName);
    let doc = this.args.card.document;
    let csFieldSets = cloneDeep(this.args.card.csFieldSets) || { isolated: [], embedded: [] };
    let csFieldOrder = [...(this.args.card.csFieldOrder || [])];

    let index = csFieldOrder.indexOf(oldFieldName);
    if (index !== -1) {
      csFieldOrder[index] = newFieldName;
    }

    for (let format of ['isolated', 'embedded']) {
      if (Array.isArray(csFieldSets[format]) && csFieldSets[format].includes(oldFieldName)) {
        csFieldSets[format] = [...csFieldSets[format].filter(i => i !== oldFieldName), newFieldName];
      }
    }
    doc
      .withoutField(oldFieldName)
      .withField(newFieldName, field.document, field.csFieldArity)
      .withAttributes({ csFieldSets, csFieldOrder });

    yield this.patchCard.perform(doc);
    this.selectedFieldName = newFieldName;
  }).restartable())
  setFieldName;

  @(task(function*(fieldName, property, value) {
    let field = yield this.args.card.field(fieldName);
    let doc = this.args.card.document.withField(fieldName, field.document, field.csFieldArity, {
      [property]: value,
    });
    yield this.patchCard.perform(doc);
  }).restartable())
  setFieldCardValue;

  @(task(function*(field, value) {
    let doc = this.args.card.document.withAttributes({
      [field]: value,
    });
    yield this.patchCard.perform(doc);
  }).restartable())
  setCardValue;

  @(task(function*(field, cardId) {
    let doc = this.args.card.document.withRelationships({
      [field]: cardId,
    });
    yield this.patchCard.perform(doc);
  }).restartable())
  setCardReference;

  @(task(function*(fieldName, neededWhenEmbedded, evt) {
    let doc = this.args.card.document;
    let csFieldSets = cloneDeep(this.args.card.csFieldSets) || { isolated: [], embedded: [] };
    if (neededWhenEmbedded && Array.isArray(csFieldSets.embedded) && !csFieldSets.embedded.includes(fieldName)) {
      csFieldSets.embedded.push(fieldName);
    } else if (!neededWhenEmbedded && Array.isArray(csFieldSets.embedded) && csFieldSets.embedded.includes(fieldName)) {
      csFieldSets.embedded = csFieldSets.embedded.filter(i => i !== fieldName);
    }

    doc.withAttributes({ csFieldSets });

    yield this.patchCard.perform(doc);
  }).restartable())
  setNeededWhenEmbedded;

  @(task(function*(fieldName) {
    let doc = this.args.card.document;
    let csFieldSets = cloneDeep(this.args.card.csFieldSets) || { isolated: [], embedded: [] };
    let csFieldOrder = [...(this.args.card.csFieldOrder || [])];

    csFieldOrder = csFieldOrder.filter(i => i !== fieldName);

    for (let format of ['isolated', 'embedded']) {
      if (Array.isArray(csFieldSets[format]) && csFieldSets[format].includes(fieldName)) {
        csFieldSets[format] = [...csFieldSets[format].filter(i => i !== fieldName)];
      }
    }
    doc.withoutField(fieldName).withAttributes({ csFieldSets, csFieldOrder });

    yield this.patchCard.perform(doc);
    if (this.selectedField.name === fieldName || this.selectedFieldName === fieldName) {
      this.cardSelected = true;
      this.selectedFieldName = null;
      this.selectedField = null;
      this.selectedFieldType = null;
    }
  }).drop())
  removeField;

  @action
  preview() {
    this.router.transitionTo('cards.card.edit.layout', this.args.card);
  }

  @action
  delete() {
    this.deleteCard.perform();
  }

  @action
  initDrag() {
    this.isDragging = true;
  }

  @action dropField(position, onFinishDrop, evt) {
    if (this.fieldOrderResolve) {
      this.fieldOrderResolve();
    }
    // This is to address race conditions around the asynchronicity of creating
    // a new field and removing the "drop shadow" of the field to be dropped. We
    // are providing the card-renderer a promise for the patching of the card
    // with a new field, as well as the ability to see the state of the promise
    // before it tries to await the promise which is important to get the timing
    // of the shadow disappearance correct.
    this.fieldOrderPromise = queryablePromise(
      new Promise(resolve => {
        this.fieldOrderResolve = resolve;
      })
    );

    onFinishDrop();
    let cardId = evt.dataTransfer.getData('text/cardId');
    if (cardId) {
      this.addField.perform(cardId, position, evt);
    } else {
      let fieldName = evt.dataTransfer.getData('text/field-name');
      let startPosition = Number(evt.dataTransfer.getData('text/start-position'));
      if (fieldName) {
        let newPosition = startPosition < position ? position - 1 : position;
        this.setPosition.perform(fieldName, newPosition, evt);
      }
    }
    this.isDragging = false;
  }

  @(task(function*(field, evt) {
    if (field && field.isDestroyed) {
      return;
    }

    // Toggling the selected field in tests is baffling me, using something more brute force
    if (environment === 'test' && this.selectedField === field) {
      return;
    }

    // we have to focus the clicked element to take focus away from the card.
    // to do that we have to give the element tabindex = 0 temporarily.
    // but if the element already has a tabindex (i.e. an input), we need
    // to make sure not to clobber it's original tabindex
    let tabIndex = evt.target.tabIndex;
    if (tabIndex === -1) {
      evt.target.tabIndex = 0;
      evt.target.focus();
      evt.target.blur();
      evt.target.tabIndex = tabIndex;
    } else {
      evt.target.focus();
    }

    this.selectedField = field;
    // I'm treating both the selectedField and the selectedFieldName separately
    // because renaming a field creates a whole new field instance, which has
    // some really awkward animation side effects--so renamed fields still
    // operate against the older field instance (from before the rename). This
    // is _not_ ideal.... A better approach would be to use a modal to prompt a
    // user for the field name when they change it. Then things would look much
    // more consistent when the new field is instantiated.
    this.selectedFieldName = null;
    this.cardSelected = false;
    yield this.loadSelectedField.perform();
  }).restartable())
  selectField;

  @action startDragging(field, evt) {
    evt.dataTransfer.setData('text', evt.target.id);
    evt.dataTransfer.setData('text/cardId', field.canonicalURL);
  }
}

function queryablePromise(promise) {
  if (promise.isResolved) return promise;

  let isPending = true;
  let isRejected = false;
  let isFulfilled = false;

  let result = promise.then(
    resolve => {
      isFulfilled = true;
      isPending = false;
      return resolve;
    },
    reject => {
      isRejected = true;
      isPending = false;
      throw reject;
    }
  );

  result.isFulfilled = function() {
    return isFulfilled;
  };
  result.isPending = function() {
    return isPending;
  };
  result.isRejected = function() {
    return isRejected;
  };
  return result;
}
