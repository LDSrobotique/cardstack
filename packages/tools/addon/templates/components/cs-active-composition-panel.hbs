{{! template-lint-disable attribute-indentation }}
{{#if (or (not model.id) permissions)}}
  <div class="cs-active-composition-panel--header" data-test-cs-active-composition-panel-header>
    {{cs-version-control
      model=model
      permissions=permissions
      enabled=editingEnabled
      afterModelSaved=(action afterModelSaved)
      on-error=(action (mut validationErrors))
    }}
  </div>

  {{#if detailedViewFieldId}}
  {{!-- Detailed view will display additional editor options, such as style variations selection,
        depending on field selected --}}
    <div class="cs-active-composition-panel--parameters" data-test-cs-active-composition-panel-parameters>
      {{#each renderedFields key="id" as |fieldMark|}}
        {{#if (eq detailedViewFieldId fieldMark.id)}}
          {{#let fieldMark.model as |field|}}
            {{cs-field-section
              field=field
              content=field.content
              caption=field.caption
              isPageModelField=(eq field.content model)
              permissions=(get permissions (cs-uid field.content))
              validate=(action "validate")
              errors=(get validationErrors field.name)
              class=(cs-error-class validationErrors field "invalid")
              hovered=(perform highlightAndScrollToField fieldMark)
              unhovered=(perform highlightAndScrollToField null)
              selected=(action openField fieldMark)
              data-test-cs-field-section=(concat field.content.type "-" field.content.id "-" (dasherize field.name))
              detailField=true
            }}
          {{/let}}
        {{/if}}
      {{/each}}
    </div>
  {{else}}
    <div class="cs-active-composition-panel--flex-title">
      {{cs-editor-panel-title title="Global Attributes"}}
    </div>

    <div class="cs-active-composition-panel--flex-slot">
      <div class="cs-active-composition-panel--scroll-wrapper">
        <div class="cs-active-composition-panel--main" data-test-cs-active-composition-panel-main>
          {{#each headerSectionFields key="id" as |field|}}
            {{cs-field-section
              field=field
              content=field.model
              caption=field.options.caption
              isPageModelField=(eq field.model model)
              permissions=(get permissions (cs-uid field.model))
              validate=(action "validate")
              errors=(get validationErrors field.name)
              class=(cs-error-class validationErrors field "invalid")
              data-test-cs-field-section=(concat field.model.type "-" field.model.id "-" (dasherize field.name))
            }}
          {{/each}}

          {{#each renderedFields key="id" as |fieldMark|}}
            {{#let
              fieldMark.model
              (cs-field-editor-options-for field.content field.caption)
            as |field editorOptions|}}
              {{#unless (or editorOptions.hideFromEditor editorOptions.headerSection)}}
                {{cs-field-section
                  field=field
                  content=field.content
                  caption=field.caption
                  isPageModelField=(eq field.content model)
                  permissions=(get permissions (cs-uid field.content))
                  validate=(action "validate")
                  errors=(get validationErrors field.name)
                  class=(cs-error-class validationErrors field "invalid")
                  hovered=(perform highlightAndScrollToField fieldMark)
                  unhovered=(perform highlightAndScrollToField null)
                  selected=(action openField fieldMark)
                  data-test-cs-field-section=(concat field.content.type "-" field.content.id "-" (dasherize field.name))
                }}
              {{/unless}}
            {{/let}}
          {{/each}}

          {{#each modelFields as |field|}}
            {{#let (cs-field-editor-options-for field.model field.options.caption)
            as |editorOptions|}}
              {{#unless (or editorOptions.hideFromEditor editorOptions.headerSection)}}
                {{cs-field-section
                  field=field
                  content=field.model
                  caption=field.options.caption
                  isPageModelField=(eq field.model model)
                  permissions=(get permissions (cs-uid field.model))
                  validate=(action "validate")
                  errors=(get validationErrors field.name)
                  class=(cs-error-class validationErrors field "invalid")
                  data-test-cs-field-section=(concat field.model.type "-" field.model.id "-" (dasherize field.name))
                }}
              {{/unless}}
            {{/let}}
          {{/each}}
        </div>
      </div>
    </div>
  {{/if}}
{{else}}
  {{!-- TODO show a busy indicator while we load the permissions --}}
{{/if}}