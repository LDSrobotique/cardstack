{{#if this.cardstackSession.isAuthenticated}}
  <div class="card-renderer--top-edge-buttons">
    <div class="top-edge--mode-label">
      Schema Mode
      <LinkTo
        @route="cards.card.edit.fields"
        @class="top-edge--mode-link edit"
        @model={{@card.canonicalURL}}
        data-test-top-edge-link="edit"
      >
        <span>Edit</span>
      </LinkTo>
    </div>
    <SaveButton
      @card={{@card}}
      @updateCard={{@updateCard}}
      @isDirty={{@isDirty}}
    />
  </div>
{{/if}}

<CardhostLeftEdge @mode="schema">
  <section class="ch-catalog">
    <header class="ch-catalog--header">
      <h3 class="ch-catalog--title">Card Catalog</h3>
    </header>
    <div class="ch-catalog--content" tabindex="0">
      <div class="ch-catalog--fields">
        {{!-- Eventually this will be a search that allows you to find cards to use for your card's fields --}}
        {{#unless this.load.isRunning}}
          {{#each this.catalogEntries as |entry|}}
            <div
              class="ch-catalog-field"
              role="button"
              draggable="true"
              {{on "mousedown" (action this.initDrag entry)}}
              {{on "dragend" (action (mut this.isDragging) false)}}
              {{on "dragstart" (action this.startDragging entry)}}
              data-test-card-add-field-draggable={{entry.canonicalURL}}
            >
              <div class="ch-catalog-field--icon">
                {{!-- TODO need to add card icon to the API and render here --}}
              </div>
              <div>
                <h4 class="ch-catalog-field--title">{{entry.csTitle}}</h4>
                {{#if entry.csDescription}}
                  <p class="ch-catalog-field--description">{{entry.csDescription}}</p>
                {{/if}}
              </div>
            </div>
          {{/each}}
        {{/unless}}
      </div>
    </div>
  </section>
</CardhostLeftEdge>

{{#unless this.load.isRunning}}
  <RightEdge
    @card={{@card}}
    @mode="schema"
    @parentCard={{this.parentCard}}
    @grandParentCard={{this.grandParentCard}}
    @selectedField={{this.selectedField}}
    @selectedFieldName={{this.selectedFieldName}}
    @selectedFieldType={{this.selectedFieldType}}
    @selectField={{perform this.selectField}}
    @setCardValue={{this.setCardValue}}
    @setFieldCardValue={{this.setFieldCardValue}}
    @setNeededWhenEmbedded={{this.setNeededWhenEmbedded}}
    @setFieldName={{this.setFieldName}}
    @cardSelected={{this.cardSelected}} />
{{/unless}}

<section class="card-schema-updator"
  data-test-card-schema={{@card.name}}
  data-test-card-patched={{stringify this.patchCard.isIdle}}
  data-test-card-fields-ready={{stringify (and this.addField.isIdle this.setPosition.isIdle)}}
>
  <CardRenderer
    @card={{@card}}
    @format="isolated"
    @mode="schema"
    @fieldOrderPromise={{this.fieldOrderPromise}}
    @removeField={{this.removeField}}
    @selectField={{perform this.selectField}}
    @setPosition={{perform this.setPosition}}
    @selectedField={{this.selectedField}}
    @selectedFieldName={{this.selectedFieldName}}
    @dropField={{action this.dropField}}
    @cardSelected={{this.cardSelected}}
    @cardFocused={{action (mut this.cardSelected)}} />
</section>

{{!-- This is hidden, used in tests --}}
<section class="cardhost-card-document">
  <h3>Card Document</h3>
  <pre data-test-card-json>{{this.cardJson}}</pre>
</section>
