import Component from '@glimmer/component';
import { action } from '@ember/object';
import { tracked } from '@glimmer/tracking';
import { inject as service } from '@ember/service';
import { startCase } from 'lodash';
import { task } from 'ember-concurrency';
import ENV from '@cardstack/cardhost/config/environment';
import { fieldCards } from '../utils/scaffolding';
import { canonicalURLToCardId } from '@cardstack/core/card-id';

const { environment } = ENV;

export default class CardManipulator extends Component {
  @service data;
  @service router;
  @service cardstackSession;
  @service cssModeToggle;

  @tracked statusMsg;
  @tracked card;
  @tracked selectedField;
  @tracked isDragging;
  @tracked cardId;
  @tracked cardSelected = true;

  constructor(...args) {
    super(...args);

    this.card = this.args.card;
    this.loadFieldCards.perform();
  }

  get cardJson() {
    if (!this.card) {
      return null;
    }
    return JSON.stringify(this.card.document.jsonapi, null, 2);
  }

  get isDirtyStr() {
    // TODO this component will have to own dirying the card (meaning no other
    // components should alter the card on their own!) Eventually this will be
    // the job of orbit.
    return this.card.isDirty.toString();
  }

  @(task(function*() {
    /**
      Returns field name in the form field-12, incrementing from the highest
      existing field number. Ex: if the highest is field-15, this will return
      field-16. If there are no fields, it returns field-1.
    */
    let existingFields = yield this.card.fields();
    let autogeneratedFieldNames = existingFields.map(field => field.name).filter(name => /^field-\d+$/.test(name));
    let fieldNumbers = autogeneratedFieldNames.map(item => Number(item.split('-')[1]));
    let newNumber = fieldNumbers.length ? Math.max(...fieldNumbers) + 1 : 1;
    return `field-${newNumber}`;
  }).drop())
  getNewFieldName;

  // Since the Card API is immutable, I don't think we need this anymore--we can
  // probably get rid of the {{did-update}} modifier
  @action
  updateCard(/*element, [card]*/) {
    // TODO this needs to be reworked. Also, we should make sure that only this
    // component is able to manipulate the workd, as opposed to letting other
    // components manipulate the card.
    // if (!card.isNew) {
    //   this.card = card;
    // }
  }

  @(task(function*(cardId, evt) {
    let doc = this.card.document;
    // TODO need to set the position too (add new csFieldPositions prop...)
    let fieldName = yield this.getNewFieldName.perform();
    doc.withField(fieldName, canonicalURLToCardId(cardId));
    let patchedCard = yield this.patchCard.perform(doc);
    let field = yield patchedCard.field(fieldName);
    this.card = patchedCard;
    this.selectField(field, evt);
  }).enqueue())
  handleNewFieldAdded;

  @task(function*() {
    this.fieldCards = yield fieldCards(this.data);
  })
  loadFieldCards;

  @(task(function*(doc) {
    return yield this.card.patch(doc.jsonapi);
  }).enqueue())
  patchCard;

  @task(function*() {
    this.statusMsg = null;
    try {
      yield this.card.delete();
    } catch (e) {
      console.error(e); // eslint-disable-line no-console
      this.statusMsg = `card ${this.card.name} was NOT successfully deleted: ${e.message}`;
      return;
    }
    this.router.transitionTo('index');
  })
  deleteCard;

  @action
  removeField(fieldNonce) {
    if (fieldNonce == null || !this.card) {
      return;
    }

    // using field nonce in order to be resiliant to the scenario where the user deletes the name of the field too
    let field = this.card.getFieldByNonce(fieldNonce);

    if (field === this.selectedField) {
      this.cardSelected = true;
    }

    field.remove();
  }

  @action
  setPosition(fieldName, position) {
    if (!fieldName || !this.card || position == null) {
      return;
    }

    let card = this.card;
    card.moveField(card.getField(fieldName), position);
  }

  @action
  setNeededWhenEmbedded(fieldName, neededWhenEmbedded, evt) {
    // this prevents 2-way data binding from trying to alter the Field
    // instance's neededWhenEmbedded value, which is bound to the input
    // that fired this action. Our data service API is very unforgiving when
    // you try to change the Field's state outside of the official API
    // (which is what ember is trying to do). Ember gets mad when it sees
    // that it can't alter the Field's state via the 2-way binding and
    // makes lots of noise. interestingly, this issue only seems to happen
    // when running tests. This work around has yucky visual side effects,
    // so only performing in the test env. A better solution would be to use/make
    // a one-way input control for setting the field.neededWhenEmbedded value.
    // The <Input> component is unfortunately, is not a one-way input helper
    if (environment === 'test') {
      evt.preventDefault();
    }

    this.card.getField(fieldName).setNeededWhenEmbedded(neededWhenEmbedded);
  }

  @action
  setFieldValue(fieldName, value) {
    if (!fieldName || !this.card) {
      return;
    }
    this.card.getField(fieldName).setValue(value);
  }

  @action
  setFieldName(oldFieldName, newFieldName) {
    this.card.getField(oldFieldName).setName(newFieldName);
    this.card.getField(newFieldName).setLabel(startCase(newFieldName));
  }

  @action
  setFieldLabel(fieldName, label) {
    this.card.getField(fieldName).setLabel(label);
  }

  @action
  setFieldInstructions(fieldName, instructions) {
    this.card.getField(fieldName).setInstructions(instructions);
  }

  @action
  preview() {
    this.router.transitionTo('cards.card.edit.layout', this.card);
  }

  @action
  delete() {
    this.deleteCard.perform();
  }

  @action
  initDrag() {
    this.isDragging = true;
  }

  @action dropField(position, onFinishDrop, evt) {
    onFinishDrop();
    let field;
    let cardId = evt.dataTransfer.getData('text/cardId');
    if (cardId) {
      this.handleNewFieldAdded.perform(cardId, evt);
    } else {
      let fieldName = evt.dataTransfer.getData('text/field-name');
      if (fieldName) {
        field = this.card.getField(fieldName);
        let newPosition = field.position < position ? position - 1 : position;
        this.setPosition(fieldName, newPosition);
      }
    }
    this.isDragging = false;

    if (field) {
      // TODO need to reimplement this--not sure if we should return the field
      // card (which is async meaning we need to use EC) or just the field
      // card's ID (sync). Since patching the doc above is async, probably we
      // should go for the async solution here...
      this.selectField(field, evt);
    }
  }

  @action selectField(field, evt) {
    if (field && field.isDestroyed) {
      return;
    }

    // Toggling the selected field in tests is baffling me, using something more brute force
    if (environment === 'test' && this.selectedField === field) {
      return;
    }

    // we have to focus the clicked element to take focus away from the card.
    // to do that we have to give the element tabindex = 0 temporarily.
    // but if the element already has a tabindex (i.e. an input), we need
    // to make sure not to clobber it's original tabindex
    let tabIndex = evt.target.tabIndex;
    if (tabIndex === -1) {
      evt.target.tabIndex = 0;
      evt.target.focus();
      evt.target.blur();
      evt.target.tabIndex = tabIndex;
    } else {
      evt.target.focus();
    }

    this.selectedField = field;
    this.cardSelected = false;
  }

  @action startDragging(field, evt) {
    evt.dataTransfer.setData('text', evt.target.id);
    evt.dataTransfer.setData('text/cardId', field.canonicalURL);
  }
}
